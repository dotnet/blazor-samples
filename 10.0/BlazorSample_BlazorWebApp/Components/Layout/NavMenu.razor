@using System.Reflection
@using System.Text.RegularExpressions

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blazor Sample</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @foreach (var name in GetRoutableComponents())
        {
            <div class="nav-item px-3">
                @if (name == "RouteParameter1")
                {
                    <NavLink class="nav-link"
                             href="route-parameter-1/amazing">
                        @Regex.Replace(name, @"(\B[A-Z]|\d+)", " $1")
                    </NavLink>
                }
                else
                {
                    <NavLink class="nav-link"
                             href="@Regex.Replace(name, @"(\B[A-Z]|\d+)", "-$1").ToLower()">
                        @Regex.Replace(name, @"(\B[A-Z]|\d+)", " $1")
                    </NavLink>
                }
            </div>
        }
    </nav>
</div>

@code {
    public IEnumerable<string> GetRoutableComponents() =>
        Assembly.GetExecutingAssembly()
           .ExportedTypes
           .Where(t => t.IsSubclassOf(typeof(ComponentBase)))
           .Where(c => c.GetCustomAttributes(inherit: true)
                        .OfType<RouteAttribute>()
                        .Any())
           .Where(c =>
               (c.Name != "Home")
               && (c.Name != "Error")
               && (c.Name != "PetDetail")
               && (c.Name != "NotFound")
               && (c.Name != "TransientService")
           )
           .OrderBy(o => o.Name)
           .Select(c => c.Name);
}
