@page "/"
@using System.Net
@using System.Text.RegularExpressions
@inject IHttpClientFactory ClientFactory

<div style="margin-bottom:15px">
    <h1>Namespace/Member</h1>
    <input id="searchText" @bind="searchText" class="form-control" aria-label="Search Text" />
    <button type="button" @onclick="GetSearchResults" class="btn btn-primary">Search</button>
    <button type="button" class="btn btn-secondary" onclick="document.getElementById('searchText').value=''">Clear</button>
</div>

<h1>Links</h1>

@if (SearchResultItems?.Results?.Count() > 0)
{
    <ol>
        @foreach (var result in SearchResultItems.Results.Select((x, i) => new { Data = x, Index = i }))
        {
            <li style="margin-bottom:5px">
                <div style="font-size:1.4em;color:green;font-weight:bold">@result.Data.DisplayName</div>
                <div><b>Item Type:</b> @result.Data.ItemType</div>
                <div><b>Description:</b> @result.Data.Description</div>
                <div><input id="m@(result.Index)0" value="<xref:@result.Data.Link>"></div>
                <div><input id="m@(result.Index)1" value="<xref:@result.Data.Link?displayProperty=fullName>"></div>
                <div><input id="m@(result.Index)2" value="<xref:@result.Data.Link?displayProperty=nameWithType>"></div>
                <div><input id="m@(result.Index)3" value="[LINK_TEXT](xref:@result.Data.Link)"></div>
                <div><input id="m@(result.Index)4" value="xref:@result.Data.Link"></div>
                <div>
                    <button type="button" class="btn btn-primary" onclick=@($"copyToClipboard('m{result.Index}0')")>Copy</button>
                    <button type="button" class="btn btn-secondary" onclick=@($"copyToClipboard('m{result.Index}1')")>Copy (Full Name)</button>
                    <button type="button" class="btn btn-secondary" onclick=@($"copyToClipboard('m{result.Index}2')")>Copy (Name with Type)</button>
                    <button type="button" class="btn btn-secondary" onclick=@($"copyToClipboard('m{result.Index}3')")>Copy (Custom Link Text)</button>
                    <button type="button" class="btn btn-secondary" onclick=@($"copyToClipboard('m{result.Index}4')")>Copy (Member Only)</button>
                </div>
            </li>
        }
    </ol>
}

@message

@code {
    private string? searchText;
    private SearchResults? SearchResultItems { get; set; }
    public string? message;

    public async Task GetSearchResults()
    {
        message = string.Empty;
        var apiClient = ClientFactory.CreateClient("APIClient");

        if (string.IsNullOrEmpty(searchText) || apiClient == null)
        {
            return;
        }

        SearchResultItems = await apiClient.GetFromJsonAsync<SearchResults>($"api/apibrowser/dotnet/search?api-version=0.2&search={searchText}");

        if (SearchResultItems?.Results != null)
        {
            foreach (var result in SearchResultItems.Results)
            {
                var client = ClientFactory.CreateClient();

                var urlEncodedRequestUrl = WebUtility.UrlEncode($"https://learn.microsoft.com/en-us{result.Url}?view=aspnetcore-9.0");
                var request = new HttpRequestMessage(HttpMethod.Get, $"https://corsproxy.io/?{urlEncodedRequestUrl}");

                var apiBrowserPage = await client.SendAsync(request);

                var metaTag = new Regex("<meta name=\"ms.assetid\" content=\"(.+?)\" />");
                var match = metaTag.Match(await apiBrowserPage.Content.ReadAsStringAsync()).Groups[1].Value;

                result.Link = match.Replace("*", "%2A").Replace("`", "%60");
            }
        }
        else
        {
            message = "Request failed.";
        }

        searchText = string.Empty;

        StateHasChanged();
    }

    public class SearchResults
    {
        public IEnumerable<Result>? Results { get; set; }
    }

    public class Result
    {
        public string? DisplayName { get; set; }
        public string? Url { get; set; }
        public string? ItemType { get; set; }
        public string? Description { get; set; }
        public string? Link { get; set; }
    }
}
