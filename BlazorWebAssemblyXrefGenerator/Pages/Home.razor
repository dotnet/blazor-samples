@page "/"

<div class="page">
    <main>
        <article class="content px-4">
            <EditForm Model="Model" OnSubmit="GetSearchResults" FormName="SearchForm">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Search</h3>
                        <span style="float:right">
                            <InputSelect @bind-Value="dotNetVersion">
                                <option>aspnetcore-9.0</option>
                                <option>aspnetcore-8.0</option>
                                <option>aspnetcore-7.0</option>
                                <option>aspnetcore-6.0</option>
                                <option>aspnetcore-5.0</option>
                                <option>aspnetcore-3.1</option>
                            </InputSelect>
                        </span>
                    </div>
                    <div class="panel-body">
                        <div class="form-group">
                            <p>Provide a namespace, class, member, or <code>/dotnet/api/...</code> relative link.</p>
                            <InputText id="searchText" @bind-Value="Model!.SearchText" aria-label="Search Text" onfocus="this.value=''" />
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Search</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => ClearUI()">Clear</button>
                        </div>
                    </div>
                </div>
            </EditForm>

            @if (isSearching)
            {
                <div class="d-flex justify-content-center my-3">
                    <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                </div>
            }

            <ol class="my-3">
               
                @foreach (var item in ResultsToRender)
                {
                    <ApiResult DisplayName="@item.DisplayName"
                               Description="@item.Description"
                               ItemType="@item.ItemType"
                               Link="@item.Link"
                               Index="@item.Index" />
                }
            </ol>

            <div class="my-3">
                @message
            </div>
        </article>
    </main>
</div>

@code {
    [SupplyParameterFromForm]
    private FormModel? Model { get; set; } = new();

    private List<SearchResult> ResultsToRender { get; set; } = new();

    public string? message;
    private string? dotNetVersion;

    private const int MaxResults = 22;
    private bool isSearching = false;

    public async Task GetSearchResults()
    {
        isSearching = true;
        ResultsToRender.Clear();
        message = string.Empty;

        if (string.IsNullOrEmpty(Model?.SearchText))
        {
            isSearching = false;
            return;
        }

        try
        {
            var searchResults = await SearchService.GetSearchResultsAsync(Model.SearchText);

            if (searchResults.Count() == 0)
            {
                message = "No results returned.";
                return;
            }

            var index = 1;
            foreach (var result in searchResults.Take(MaxResults))
            {
                var searchResult = await SearchService.GetSearchResultDataAsync(result, dotNetVersion);
                result.Index = index++;
                ResultsToRender.Add(searchResult);
                StateHasChanged();
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.BadRequest)
        {
            message = "Bad Request! No results returned.";
        }
        finally
        {
            isSearching = false;
        }
    }

    private void ClearUI()
    {
        ResultsToRender.Clear();
        Model!.SearchText = string.Empty;
        message = string.Empty;
    }

    public class FormModel
    {
        public string? SearchText { get; set; } = string.Empty;
    }
}
