@page "/call-movie-web-api-ssr"
@rendermode InteractiveServer
@using BlazorApp.Client.Models
@using BlazorApp.Client.Services
@implements IDisposable
@inject PersistentComponentState ApplicationState
@inject IMovieService MovieService

<PageTitle>Call Movie web API (SSR)</PageTitle>

<h1>Call Movie web API Example (SSR)</h1>

@if (movies == null)
{
    <p>No movies found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">
                    <label>
                        Watched
                        <input type="checkbox" @bind="getWatchedMovies" @bind:after="GetMovies" />
                    </label>
                </th>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr id="editRow" style="display:@editRowStyle">
                <td class="text-center">
                    <input type="checkbox" @bind="editMovie.IsWatched" />
                </td>
                <td>
                    <input @bind="editMovie.Name" />
                </td>
                <td class="text-center">
                    <button class="btn btn-success" @onclick="SaveMovie">
                        Save
                    </button>
                    <button class="btn btn-danger"
                            @onclick="@(() => editRowStyle = "none")">
                        Cancel
                    </button>
                </td>
            </tr>
            @foreach (var movie in movies)
            {
                <tr>
                    <td class="text-center">
                        @if (movie.IsWatched)
                        {
                            <span>âœ”</span>
                        }
                    </td>
                    <td>@movie.Name</td>
                    <td class="text-center">
                        <button class="btn btn-warning" @onclick="@(() => EditMovie(movie.Id))">
                            Edit
                        </button>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteMovie(movie.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
            <tr id="addRow">
                <td></td>
                <td>
                    <input @bind="newMovieName" placeholder="New Movie" />
                </td>
                <td class="text-center">
                    <button class="btn btn-success" @onclick="AddMovie">Add</button>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private Movie editMovie = new();
    private string editRowStyle = "none";
    private string? newMovieName;
    private Movie[]? movies;
    private bool getWatchedMovies;
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        if (!ApplicationState.TryTakeFromJson<Movie[]>(nameof(movies), out var restoredData))
        {
            await GetMovies();
        }
        else
        {
            movies = restoredData!;
        }

        // Call at the end to avoid a potential race condition at app shutdown
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);
    }

    private async Task GetMovies() =>
        movies = await MovieService.GetMoviesAsync(getWatchedMovies) ?? Array.Empty<Movie>();

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(movies), movies);

        return Task.CompletedTask;
    }

    private void EditMovie(long id)
    {
        if (movies is not null)
        {
            editMovie = movies.Single(i => i.Id == id);
            editRowStyle = "table-row";
        }
    }

    private async Task AddMovie()
    {
        if (!string.IsNullOrEmpty(newMovieName))
        {
            var addMovie = new Movie { Name = newMovieName, IsWatched = false };
            await MovieService.PostMovieAsync(addMovie);
            newMovieName = string.Empty;
            await GetMovies();
            editRowStyle = "none";
        }
    }

    private async Task SaveMovie()
    {
        if (editMovie is not null)
        {
            await MovieService.PutMovieAsync(editMovie.Id, editMovie);
        }
        await GetMovies();
        editRowStyle = "none";
    }

    private async Task DeleteMovie(long id)
    {
        await MovieService.DeleteMovieAsync(id);
        await GetMovies();
        editRowStyle = "none";
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}
